[project]
name = "pyhelloinstaller"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
authors = [
    { name = "Helio Chissini de Castro", email = "heliocastro@gmail.com" }
]
requires-python = ">=3.13"
dependencies = [
    "pyqt5>=5.15.11",
]

[project.scripts]
pyhelloinstaller = "pyhelloinstaller:window"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/pyhelloinstaller"]

[tool.hatch.envs.default.scripts]
buildinstall = "pyinstaller --onefile --paths src -n pyhelloinstaller -w -m pyhelloinstaller pyhelloinstaller"

[dependency-groups]
dev = [
    "hatch>=1.14.1",
    "mypy>=1.15.0",
    "ptpython>=3.0.30",
    "ruff>=0.11.10",
]
install = [
    "pyinstaller>=6.13.0",
]

[tool.pytest.ini_options]
addopts = ["--import-mode=importlib"]
log_cli = true
log_cli_level = "INFO"
pythonpath = "src"

[tool.pylint.messages_control]
disable = [
    "abstract-method",
    "arguments-differ",
    "attribute-defined-outside-init",
    "blacklisted-name",
    "chained-comparison",
    "duplicate-code",
    "eval-used",
    "exec-used",
    "expression-not-assigned",
    "fixme",
    "global-statement",
    "invalid-name",
    "import-error",
    "logging-fstring-interpolation",
    "missing-docstring",
    "no-member",
    "no-name-in-module",
    "protected-access",
    "redefined-argument-from-local",
    "redefined-outer-name",
    "reimported",
    "stop-iteration-return",
    "too-few-public-methods",
    "too-many-ancestors",
    "too-many-arguments",
    "too-many-branches",
    "too-many-instance-attributes",
    "too-many-lines",
    "too-many-locals",
    "too-many-return-statements",
    "too-many-statements",
    "unexpected-special-method-signature",
    "unspecified-encoding",
]

[tool.mypy]
plugins = ["pydantic.mypy"]
follow_imports = "normal"
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_reexport = true
disallow_untyped_defs = true
ignore_missing_imports = true

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true

[tool.ruff]
fix = true
line-length = 120
# Exclude a variety of commonly ignored directories.
extend-exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]
# Assume Python 3.13.
target-version = "py313"

[tool.ruff.lint]
extend-select = [
    "E",   # pycodestyle error
    "W",   # pycodestyle warning
    "F",   # pyflakes
    "A",   # flakes8-builtins
    "COM", # flakes8-commas
    "C4",  # flake8-comprehensions
    "Q",   # flake8-quotes
    "SIM", # flake8-simplify
    "PTH", # flake8-use-pathlib
    "I",   # isort
    "N",   # pep8 naming
    "UP",  # pyupgrade
    "S",   # bandit
]
ignore = [
    'N802',   # function name should be lowercase
    'SIM105', # Suggest contextlib instead of try/except with pass
    'COM812', # missing-trailing-comma from flake8-commas
    'A005', # Python shadow
]
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
flake8-tidy-imports.ban-relative-imports = "all"
isort.required-imports = ["from __future__ import annotations"]
# Unlike Flake8, default to a complexity level of 10.
mccabe.max-complexity = 10

[tool.ruff.lint.per-file-ignores]
"**/{tests}/*.py" = ["S101"]
"**/{docs}/*" = ["A001"]

[tool.pyright]
reportUnboundVariable = false
venvPath = "."
venv = ".venv"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
